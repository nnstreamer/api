name: Android build collections
description:

inputs:
  abi:
    description: target ABI
    required: false
    default: arm64-v8a
  build_type:
    description: build type
    required: false
    default: all
outputs:
  result:
    value: ${{ steps.ndk-build.outputs.result }}

runs:
  using: composite
  steps:
    - name: Prepare NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r25c
        link-to-sdk: true
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
    - name: restore gst_android_pkg cache
      id: restore-gst_android_pkg-cache
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/android/gst_root_android/
        key: gst_android_pkg-cache-${{ hashFiles('.github/actions/android-build/action.yml') }}
    - name: Get gstreamer-android
      if: steps.restore-gst_android_pkg-cache.outputs.cache-hit != 'true'
      run: |
        gst_android_ver=1.24.12
        gst_android_pkg=gstreamer-1.0-android-universal-${gst_android_ver}.tar.xz
        mkdir -p ~/android/gst_root_android/
        pushd ~/android/gst_root_android/
        wget -q https://gstreamer.freedesktop.org/data/pkg/android/${gst_android_ver}/${gst_android_pkg}
        tar -xf ${gst_android_pkg}
        rm ${gst_android_pkg}
        popd
      shell: bash
    - name: Get nnstreamer
      uses: actions/checkout@v4
      with:
        repository: nnstreamer/nnstreamer
        path: nnstreamer
    - name: Get nnstreamer-edge
      uses: actions/checkout@v4
      with:
        repository: nnstreamer/nnstreamer-edge
        path: nnstreamer-edge
    - name: Get nnstreamer-android-resource
      uses: actions/checkout@v4
      with:
        repository: nnstreamer/nnstreamer-android-resource
        path: nnstreamer-android-resource
    - name: Get deviceMLOps.MLAgent
      uses: actions/checkout@v4
      with:
        repository: nnstreamer/deviceMLOps.MLAgent
        path: deviceMLOps.MLAgent
    - name: NDK build
      id: ndk-build
      run: |
        echo "NDK build, ${{ github.workspace }}"
        export GSTREAMER_ROOT_ANDROID=~/android/gst_root_android/
        export NNSTREAMER_ROOT=${{ github.workspace }}/nnstreamer
        export NNSTREAMER_EDGE_ROOT=${{ github.workspace }}/nnstreamer-edge
        export NNSTREAMER_ANDROID_RESOURCE=${{ github.workspace }}/nnstreamer-android-resource
        export MLOPS_AGENT_ROOT=${{ github.workspace }}/deviceMLOps.MLAgent
        export ML_API_ROOT=${{ github.workspace }}
        if [ ${TARGET_ABI} == 'arm64-v8a' ]; then
          bash ${{ github.workspace }}/java/build-nnstreamer-android.sh --target_abi=${TARGET_ABI} --enable_nnfw=yes --build_type=${BUILD_TYPE} --enable_mqtt=yes --enable_ml_offloading=yes --enable_ml_service=yes --enable_llamacpp=yes
        elif [ ${TARGET_ABI} == 'x86_64' ]; then
          bash ${{ github.workspace }}/java/build-nnstreamer-android.sh --target_abi=${TARGET_ABI} --enable_nnfw=no --build_type=${BUILD_TYPE}
        else
          bash ${{ github.workspace }}/java/build-nnstreamer-android.sh --target_abi=${TARGET_ABI} --enable_nnfw=no --enable_tflite=no --build_type=${BUILD_TYPE}
        fi

        result=$?
        if [[ ${result} -ne 0 ]]; then
          echo "NDK build failed"
          echo "result=failure" >> ${GITHUB_OUTPUT}
        else
          echo "NDK build success"
          echo "result=success" >> ${GITHUB_OUTPUT}
        fi
      shell: bash
      env:
        TARGET_ABI: ${{ inputs.abi }}
        BUILD_TYPE: ${{ inputs.build_type }}

    - name: save gst_android_pkg cache (main branch only)
      uses: actions/cache/save@v4
      id: save-gst_android_pkg-cache
      if: always() && github.ref == 'refs/heads/main'
      with:
        path: |
          ~/android/gst_root_android/
        key: gst_android_pkg-cache-${{ hashFiles('.github/actions/android-build/action.yml') }}
